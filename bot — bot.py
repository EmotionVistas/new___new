import disnake
from disnake.ext import commands, tasks
import asyncio
from datetime import datetime
import random
import mach

bot = commands.Bot(command_prefix=".",help_command=None , intents=disnake.Intents.all(), test_guilds=[1207013223476498472])

target_channel_id = 1207169583166005288 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞

xp = {}

@bot.event
async def on_ready():
    await bot.change_presence(status=disnake.Status.idle)
    print(f'–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
    change_status.start()

@tasks.loop(seconds=10)
async def change_status():
    guild = bot.get_guild(1207013223476498472)  # –ó–∞–º–µ–Ω–∏—Ç–µ ID –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    time = datetime.now().strftime('%H:%M')
    status = f'üë•: {guild.member_count} | {time} –ú–°–ö'
    await bot.change_presence(activity=disnake.Activity(type=disnake.ActivityType.watching, name=status))

@bot.event
async def on_message(message):
    if message.author.bot:
        return
    if message.channel.id == 1207166132285476874:  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        xp.setdefault(message.author.id, 0)
        xp[message.author.id] += random.randint(2, 5)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –æ—Ç 2 –¥–æ 5 –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.process_commands(message)

@bot.event
async def update_voice_xp():
    await bot.wait_until_ready()
    while not bot.is_closed():
        for guild in bot.guilds:
            for member in guild.members:
                if member.voice and member.voice.channel:
                    xp[member.id] = xp.get(member.id, 0) + random.randint(1, 2)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ XP –æ—Ç 1 –¥–æ 2 –∑–∞ –º–∏–Ω—É—Ç—É –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        await asyncio.sleep(60)  # –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

@bot.event
async def on_voice_state_update(member, before, after):
    if before.channel!= after.channel and after.channel:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
        xp[member.id] = xp.get(member.id, 0) + 2
    elif before.channel!= after.channel and not after.channel:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        xp[member.id] = max(0, xp.get(member.id, 0) - 2)  # —É–º–µ–Ω—å—à–∞–µ–º –æ–ø—ã—Ç –Ω–∞ 2, –Ω–æ –Ω–µ –Ω–∏–∂–µ 0


# –ù—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–Ω–∏–∑—É!)


@bot.slash_command(description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç")
async def xp(ctx):
    user_xp = xp.get(ctx.author.id, 0)
    await ctx.send(f'–í–∞—à —Ç–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {user_xp} XP')

# –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
bot.run('token')